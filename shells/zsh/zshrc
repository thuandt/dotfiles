#!/usr/bin/env zsh
# ~/.zshrc

# zinit
export ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
if [[ ! -f "${ZINIT_HOME}/zinit.zsh" ]]; then
  command mkdir -p "$(dirname $ZINIT_HOME)/completions" && command chmod g-rwX "$(dirname $ZINIT_HOME)"
  command git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

if [[ ! -f "$(dirname $ZINIT_HOME)/completions/_zinit" ]]; then
  command ln -sf "$ZINIT_HOME/_zinit" "$(dirname $ZINIT_HOME)/completions/_zinit"
fi

source "${ZINIT_HOME}/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Create cache and completions dir and add to $fpath
mkdir -p "$ZSH_CACHE_DIR/completions"
(( ${fpath[(Ie)"$ZSH_CACHE_DIR/completions"]} )) || fpath=("$ZSH_CACHE_DIR/completions" $fpath)

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
export ZSH_AUTOSUGGEST_STRATEGY=(history completion)
zinit light zdharma-continuum/zinit-annex-meta-plugins
zinit light-mode lucid skip"dircolors-material" for annexes zsh-users+fast console-tools

# direnv workaround for instant-prompt
# https://github.com/romkatv/powerlevel10k/blob/master/README.md#how-do-i-initialize-direnv-when-using-instant-prompt
(( ${+commands[direnv]} )) && emulate zsh -c "$(direnv export zsh)"

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# direnv workaround for instant-prompt
(( ${+commands[direnv]} )) && emulate zsh -c "$(direnv hook zsh)"

# disable C-s stopping receiving keyboard signals.
# stty start undef
# stty stop undef

# OMZ libs and plugins
zinit light-mode lucid for \
  OMZL::clipboard.zsh \
  OMZL::completion.zsh \
  OMZL::directories.zsh \
  OMZL::functions.zsh \
  OMZL::git.zsh \
  OMZL::grep.zsh \
  OMZL::history.zsh \
  OMZL::key-bindings.zsh \
  OMZL::misc.zsh \
  OMZL::termsupport.zsh \
  OMZL::theme-and-appearance.zsh \
  OMZP::mise \
  OMZP::gcloud \
  atload"unalias grv" OMZP::git

# For GNU ls (the binaries can be gls, gdircolors, e.g. on OS X when installing the
# coreutils package from Homebrew or using https://github.com/ogham/exa)
zinit light-mode lucid reset \
  atclone'dircolors -b dircolors.ansi-dark > clrs.zsh' \
  atpull'%atclone' pick'clrs.zsh' nocompile'!' \
  atload'zstyle ":completion:*" list-colors "${(s.:.)LS_COLORS}"' \
  for seebi/dircolors-solarized

zinit light-mode lucid depth=1 for \
  OMZP::gpg-agent \
  OMZP::ansible \
  OMZP::azure \
  OMZP::aws \
  OMZP::extract \
  OMZP::encode64 \
  jeffreytse/zsh-vi-mode \
  OMZP::nmap \
  OMZP::kubectl \
  OMZP::helm \
  OMZP::minikube \
  OMZP::rsync \
  OMZP::sudo \
  OMZP::systemd \
  OMZP::suse \
  OMZP::npm \
  OMZP::yarn \
  OMZP::gitignore \
  chrissicool/zsh-256color \
  djui/alias-tips \
  jreese/zsh-titles \
  amstrad/oh-my-matrix \
  iboyperson/pipenv-zsh \
  darvid/zsh-poetry \
  micha/resty \
  changyuheng/fz \
  thuandt/zsh-config \
  thuandt/zsh-terraform \
  thuandt/zsh-vault \
  thuandt/zsh-pipx

zinit pack"bgn-binary+keys" for fzf

# z
zinit light-mode lucid cp='z.sh -> z' pick'z' src'z.sh' for rupa/z

# enhancd with fzf
zinit light-mode lucid pick'init.sh' nocompletions for b4b4r07/enhancd

# direnv
zinit light-mode lucid as'null' from'gh-r' \
  mv'direnv* -> direnv' \
  sbin'direnv' src'zhook.zsh' \
  atclone'./direnv hook zsh > zhook.zsh' \
  atpull'%atclone' for direnv/direnv

# dog: replacement for dig
zinit light-mode lucid as'null' from'gh-r' \
  sbin'bin/dog' \
  atclone'ln -sf completions/dog.zsh _dog' \
  atpull'%atclone' for ogham/dog

# doggo: Command-line DNS client for humans
zinit light-mode lucid as'null' from'gh-r' \
  sbin'doggo' \
  atclone'ln -sf completions/doggo.zsh _doggo' \
  atpull'%atclone' for mr-karan/doggo

# kubectx
zinit light-mode lucid pick'/dev/null' \
  sbin'kubectx' sbin'kubens' \
  atclone'ln -sf completion/_kubectx.zsh _kubectx; ln -sf completion/_kubens.zsh _kubens' \
  atpull'%atclone' for ahmetb/kubectx

# ansiweather
zinit light-mode lucid pick'/dev/null' sbin'ansiweather' for fcambus/ansiweather

# color logger
zinit light-mode lucid src'color-logger.bash' pick'/dev/null' for swyckoff/color-logger-bash

# poetry
zinit light-mode lucid has'poetry' as'completion' id-as'poetry/completion' \
  atclone'poetry completions zsh > _poetry' \
  atpull'%atclone' for zdharma-continuum/null

# # eksctl
# zinit ice wait lucid id-as'weaveworks/eksctl-bin' \
#   atclone'tar xzf eksctl-bin; rm -f eksctl-bin; ./eksctl completion zsh > _eksctl' \
#   atpull'%atclone' \
#   sbin'eksctl' \
#   pick'/dev/null'
# zinit snippet https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz

# rust
export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"
zinit light-mode lucid has'rustup' as'completion' id-as'rust/completion' \
  atclone'rustup completions zsh > _rustup; rustup completions zsh cargo > _cargo' \
  atpull'%atclone' for zdharma-continuum/null

# rclone
zinit light-mode lucid from'gh-r' pick'/dev/null' \
  mv'rclone* -> rclone' \
  sbin'rclone/rclone' \
  atclone'./rclone/rclone genautocomplete zsh _rclone' \
  atpull'%atclone' for rclone/rclone

# exercism
zinit light-mode lucid from'gh-r' \
  atclone'ln -sf shell/exercism_completion.zsh _exercism' \
  atpull'%atclone' \
  sbin'exercism' \
  pick'/dev/null' for exercism/cli

# container-diff
zinit ice wait lucid id-as'GoogleContainerTools/container-diff' \
  sbin'container-diff' \
  pick'/dev/null'
zinit snippet https://storage.googleapis.com/container-diff/latest/container-diff-linux-amd64

# cloud_sql_proxy
zinit ice wait lucid id-as'GoogleCloudPlatform/cloud_sql_proxy' \
  sbin'cloud_sql_proxy' \
  pick'/dev/null'
zinit snippet https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.15.2/cloud-sql-proxy.linux.amd64

# telepresence
zinit ice wait lucid id-as'telepresenceio/telepresence' \
  sbin'telepresence' \
  pick'/dev/null'
zinit snippet https://app.getambassador.io/download/tel2/linux/amd64/latest/telepresence

zinit wait light-mode lucid for \
  pick'manydots-magic' knu/zsh-manydots-magic \
  zchee/zsh-completions

zinit light-mode lucid as'null' from'gh-r' for \
  sbin'stern' stern/stern \
  sbin'cue' cue-lang/cue \
  sbin'k9s' derailed/k9s \
  sbin'procs' dalance/procs \
  sbin'noti' variadico/noti \
  sbin'ktlint' pinterest/ktlint \
  sbin'pg_flame' mgartner/pg_flame \
  sbin'doctl' digitalocean/doctl \
  mv'yq* -> yq' sbin'yq' mikefarah/yq \
  sbin'postgrest' PostgREST/postgrest \
  sbin'tflint' terraform-linters/tflint \
  sbin'terraform-lsp' juliosueiras/terraform-lsp \
  sbin'conftest' open-policy-agent/conftest \
  sbin'age' sbin'age-keygen' FiloSottile/age \
  sbin'hugo' bpick'*ext*64bit*' gohugoio/hugo \
  sbin'ksops' viaduct-ai/kustomize-sops \
  mv'jq* -> jq' sbin'jq' jqlang/jq \
  mv'jaq* -> jaq' sbin'jaq' 01mf02/jaq \
  sbin'tfsec' bpick'*amd64.tar.gz' aquasecurity/tfsec \
  mv'*q* -> q' sbin'q' harelba/q \
  sbin'flatc' google/flatbuffers \
  mv'gdu* -> gdu' sbin'gdu' dundee/gdu \
  sbin'zed' sbin'zq' brimdata/zed \
  sbin'steampipe' turbot/steampipe \
  sbin'powerpipe' turbot/powerpipe \
  mv'grv* -> grv' sbin'grv' @rgburke/grv \
  mv'shfmt* -> shfmt' sbin'shfmt' @mvdan/sh \
  mv'upx* -> upx' sbin'upx/upx' upx/upx \
  mv'exa* -> exa' sbin'bin/exa' ogham/exa \
  mv'opa* -> opa' sbin'opa' open-policy-agent/opa \
  mv'guetzli* -> guetzli' sbin'guetzli' google/guetzli \
  mv'mkcert* -> mkcert' sbin'mkcert' FiloSottile/mkcert \
  mv'fluxctl* -> fluxctl' sbin'fluxctl' fluxcd/flux \
  sbin'terraform-docs' terraform-docs/terraform-docs \
  mv'infracost* -> infracost' sbin'infracost' infracost/infracost \
  mv'hlint* -> hlint' sbin'hlint/hlint' ndmitchell/hlint \
  mv'trdsql* -> trdsql' sbin'trdsql/trdsql' noborus/trdsql \
  mv'miller* -> miller' sbin'miller/mlr' bpick'*amd64.tar.gz' johnkerl/miller \
  mv'stack* -> stack' sbin'stack/stack' bpick'*.tar.gz' commercialhaskell/stack \
  sbin'flyctl' atclone'./flyctl completion zsh > _flyctl' atpull'%atclone' superfly/flyctl \
  mv'argocd-image-updater* -> argocd-image-updater' sbin'argocd-image-updater' argoproj-labs/argocd-image-updater \
  mv'stylish-haskell* -> stylish-haskell' sbin'stylish-haskell/stylish-haskell' @haskell/stylish-haskell

# zsh-diff-so-fancy
zplugin light-mode lucid \
  pick"bin/git-dsf" \
  sbin'bin/git-dsf' \
  sbin'bin/diff-so-fancy' \
  as"program" for zdharma-continuum/zsh-diff-so-fancy

zinit light-mode lucid for \
  gradle/gradle-completion \
  arzzen/calc.plugin.zsh

zinit load zsh-users/zsh-history-substring-search
zinit ice wait atload'_history_substring_search_config'

### THEME ###
zinit light-mode lucid nocd depth='1' atload'!source ~/.p10k.zsh; _p9k_precmd' for romkatv/powerlevel10k

# Username completion.
# Delete old definitions
zstyle -d users
# For SSH and related stuff, use remote users set in SSH configuration, plus root
zstyle ':completion:*:*:(ssh|scp|rsync|mosh|slogin):*' users root $(awk '$1 == "User" { print $2 }' ~/.ssh/config ~/.ssh/config.d/* | sort -u)
# For everything else, use non-system users from /etc/passwd, plus root
zstyle ':completion:*:*:*:*' users root $(awk -F: '$3 >= 1000 && $3 < 65000 { print $1 }' /etc/passwd)

# ssh hostname completion
# https://serverfault.com/a/170481
h=()
if [[ -r ~/.ssh/config ]]; then
  h=($h ${${${(@M)${(f)"$(cat ~/.ssh/config ~/.ssh/config.d/* 2>/dev/null)"}:#Host *}#Host }:#*[*?]*})
fi
# HashKnownHosts must be disabled
# if [[ -r ~/.ssh/known_hosts ]]; then
#   h=($h ${${${(f)"$(cat ~/.ssh/known_hosts{,2} || true)"}%%\ *}%%,*}) 2>/dev/null
# fi
if [[ $#h -gt 0 ]]; then
  zstyle ':completion:*:(ssh|scp|rsync|lftp|ftp|mosh|slogin):*' hosts $h
fi

# Hostname completion
zstyle -e ':completion:*:hosts' hosts 'reply=(${=${(f)"$(grep -v 0.0.0.0 /etc/hosts)"}%%\#*})'

# Prettify path
if [ -n "$($SHELL -c "echo $ZSH_VERSION")" ]; then
  # remove duplicates in zsh path
  # https://til.hashrocket.com/posts/7evpdebn7g-remove-duplicates-in-zsh-path
  # shellcheck disable=SC2034
  typeset -aU path
# elif [ -n "$($SHELL -c "echo $BASH_VERSION")" ]; then
else
  PATH="$(perl -e 'print join(":", grep { not $seen{$_}++ } split(/:/, $ENV{PATH}))')"
fi

# Tilix
# https://github.com/gnunn1/tilix/wiki/VTE-Configuration-Issue
if [[ "$OSTYPE" == linux* ]]; then
  if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
    source /etc/profile.d/vte.sh
  fi
fi

# Don't store failed command to history
# http://scarff.id.au/blog/2019/zsh-history-conditional-on-command-success/
zshaddhistory() {
  whence ${${(z)1}[1]} >| /dev/null || return 1
  local line cmd
  line=${1%%$'\n'}
  cmd=${line%% *}
  [[ ${#line} -ge 5 \
    && ${cmd} != (apm|base64|bzip2|cal|calc|cat|cd|chmod|cp|curl|cvs|date|df|diff|dig|disklabel|dmesg|doas|du|e|egrep|enc|ent|exiftool|f|fdisk|feh|file|find|gimp|git|gpg|grep|hdiutil|head|hostname|ifconfig|kill|less|ls|mail|make|man|mkdir|mount|mpv|mv|nc|openssl|patch|pdf|pdfinfo|pgrep|ping|pkg_info|pkill|ps|rcctl|rm|rsync|scp|scrot|set|sha256|sort|srm|ssh|stat|strip|sudo|sysctl|tar|tmux|top|umount|uname|unzip|uptime|useradd|vlc|vi|vim|wc|wget|which|whoami|whois|wireshark|xclip|xxd|youtube-dl)
  ]]
}

# WSL2
# gpg-agent with YubiKey
# https://github.com/rupor-github/win-gpg-agent

autoload -Uz compinit
compinit

# -q is for quiet; actually run all the `compdef's saved before `compinit` call
# (`compinit' declares the `compdef' function, so it cannot be used until
# `compinit' is ran; Zinit solves this via intercepting the `compdef'-calls and
# storing them for later use with `zinit cdreplay')

zinit cdreplay -q

# p10k instant prompt
(( ! ${+functions[p10k]} )) || p10k finalize

# Clear screen
# clear

# End of ~/.zshrc
