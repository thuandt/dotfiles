#!/usr/bin/env zsh
# ~/.zshrc

export ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
if [[ ! -f "${ZINIT_HOME}/zinit.zsh" ]]; then
  command mkdir -p "$(dirname $ZINIT_HOME)/completions" && command chmod g-rwX "$(dirname $ZINIT_HOME)"
  command git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

if [[ ! -f "$(dirname $ZINIT_HOME)/completions/_zinit" ]]; then
  command ln -sf "$ZINIT_HOME/_zinit" "$(dirname $ZINIT_HOME)/completions/_zinit"
fi

source "${ZINIT_HOME}/zinit.zsh"
#autoload -Uz _zinit
#(( ${+_comps} )) && _comps[zinit]=_zinit

#
# Bindkeys
#

autoload up-line-or-beginning-search down-line-or-beginning-search
autoload history-substring-search-up history-substring-search-down
autoload autosuggest-execute

zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
zle -N history-substring-search-up
zle -N history-substring-search-down
zle -N autosuggest-execute

bindkey -v

# bind Alt+. to insert last argument of last command
bindkey -M viins '\e.' insert-last-word

# # Using Ctrl-Space for quick execute suggest command
bindkey '^ ' autosuggest-execute

# Bind terminal-specific up and down keys
# Bind in both emacs and vi modes so it works in both, and is not
# sensitive to whether this is loaded before or after the vi-mode plugin
if [[ -n "$terminfo[kcuu1]" ]]; then
  bindkey -M emacs "$terminfo[kcuu1]" history-substring-search-up
  bindkey -M viins "$terminfo[kcuu1]" history-substring-search-up
fi
if [[ -n "$terminfo[kcud1]" ]]; then
  bindkey -M emacs "$terminfo[kcud1]" history-substring-search-down
  bindkey -M viins "$terminfo[kcud1]" history-substring-search-down
fi

# bind P and N for EMACS mode
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down

# bind k and j for VI mode
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# disable C-s stopping receiving keyboard signals.
stty start undef
stty stop undef

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light zdharma-continuum/zinit-annex-meta-plugins
zinit light-mode lucid for annexes zsh-users+fast zdharma console-tools fuzzy prezto

# OMZ libs and plugins
zinit light-mode lucid for \
  OMZL::clipboard.zsh \
  OMZL::completion.zsh \
  OMZL::directories.zsh \
  OMZL::functions.zsh \
  OMZL::git.zsh \
  OMZL::grep.zsh \
  OMZL::history.zsh \
  OMZL::key-bindings.zsh \
  OMZL::misc.zsh \
  OMZL::termsupport.zsh \
  OMZL::theme-and-appearance.zsh \
  OMZP::asdf \
  OMZP::gcloud \
  atload"unalias grv" OMZP::git

# For GNU ls (the binaries can be gls, gdircolors, e.g. on OS X when installing the
# coreutils package from Homebrew or using https://github.com/ogham/exa)
zinit ice wait='0c' lucid reset \
  atclone='dircolors -b dircolors.ansi-dark > clrs.zsh' \
  atpull='%atclone' pick='clrs.zsh' nocompile='!' \
  atload='zstyle ":completion:*" list-colors "${(s.:.)LS_COLORS}"'
zinit light seebi/dircolors-solarized

zinit wait light-mode lucid blockf atload='zicompinit; zicdreplay' blockf for \
  zchee/zsh-completions

zinit wait light-mode lucid depth=1 for \
  OMZP::gpg-agent \
  OMZP::aws \
  OMZP::extract \
  OMZP::encode64 \
  OMZP::vi-mode \
  OMZP::nmap \
  OMZP::kubectl \
  OMZP::helm \
  OMZP::kops \
  OMZP::minikube \
  OMZP::rsync \
  OMZP::sudo \
  OMZP::systemd \
  OMZP::ubuntu \
  OMZP::npm \
  OMZP::yarn \
  OMZP::gitignore \
  OMZP::docker-compose \
  OMZP::docker-machine \
  chrissicool/zsh-256color \
  djui/alias-tips \
  jreese/zsh-titles \
  amstrad/oh-my-matrix \
  iboyperson/pipenv-zsh \
  darvid/zsh-poetry \
  micha/resty \
  changyuheng/fz \
  make='PREFIX=$ZPFX install' mptre/yank \
  make='PREFIX=$ZPFX install' AltraMayor/f3 \
  make='install prefix=$ZPFX' axboe/fio \
  thuandt/zsh-terraform \
  thuandt/zsh-vault \
  thuandt/zsh-pipx \
  thuandt/zsh-config

zinit wait light-mode lucid atinit='zicompinit; zicdreplay' for \
  id-as='_docker' https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker \
  id-as='_docker-compose' https://github.com/docker/compose/blob/master/contrib/completion/zsh/_docker-compose \
  id-as='_docker-machine' https://github.com/docker/machine/blob/master/contrib/completion/zsh/_docker-machine

# the_silver_searcher: ag
zinit ice wait='2' lucid depth='1' \
  atclone='./build.sh --prefix=$ZPFX' \
  atpull='%atclone' \
  make='install' \
  pick='/dev/null'
zinit light ggreer/the_silver_searcher

# z
zinit ice wait lucid cp='z.sh -> z' pick='z' src='z.sh'
zinit light rupa/z
# zinit ice wait lucid

# enhancd with fzf
zinit ice wait lucid pick='init.sh'
zinit light b4b4r07/enhancd

# direnv
zinit ice as='null' wait lucid from='gh-r' \
  mv='direnv* -> direnv' \
  sbin src='zhook.zsh' \
  atclone='./direnv hook zsh > zhook.zsh' \
  atpull='%atclone'
zinit light direnv/direnv

# dog: replacement for dig
zinit ice as='null' wait lucid from='gh-r' \
  sbin='bin/dog' \
  atclone='ln -sf completions/dog.zsh _dog' \
  atpull='%atclone'
zinit light ogham/dog

# doggo: Command-line DNS client for humans
zinit ice as='null' wait lucid from='gh-r' \
  sbin='doggo' \
  atclone='ln -sf completions/doggo.zsh _doggo' \
  atpull='%atclone'
zinit light mr-karan/doggo

# kubectx
zinit ice wait='2' lucid pick='/dev/null' sbin='kubectx' sbin='kubens' \
  atclone='ln -sf completion/kubectx.zsh _kubectx; ln -sf completion/kubens.zsh _kubens' \
  atpull='%atclone'
zinit light ahmetb/kubectx

# ansiweather
zinit ice wait='2' lucid pick='/dev/null' sbin
zinit light fcambus/ansiweather

# color logger
zinit ice wait lucid src='color-logger.bash' pick='/dev/null'
zinit light swyckoff/color-logger-bash

# poetry
zinit ice has='poetry' wait='2' as='completion' id-as'poetry/completion' lucid \
  atclone='poetry completions zsh > _poetry' \
  atpull='%atclone'
zinit light zdharma-continuum/null

# eksctl
zinit ice wait='2' lucid from"gh-r" pick='/dev/null' sbin \
  atclone='./eksctl completion zsh > _eksctl' \
  atpull='%atclone'
zinit light weaveworks/eksctl

# rust
export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"
zinit ice has='rustup' wait='2' as='completion' id-as='rust/completion' lucid \
  atclone'rustup completions zsh > _rustup; rustup completions zsh cargo > _cargo' \
  atpull='%atclone'
zinit light zdharma-continuum/null

# rclone
zinit ice wait='2' lucid from='gh-r' pick='/dev/null' \
  bpick='*-linux-amd64.zip' \
  mv='rclone* -> rclone' \
  sbin='rclone/rclone' \
  atclone='./rclone/rclone genautocomplete zsh _rclone'\
  atpull='%atclone'
zinit light rclone/rclone

# exercism
zinit ice wait='2' lucid from='gh-r' \
  atclone='ln -sf shell/exercism_completion.zsh _exercism' \
  atpull='%atclone' \
  sbin='exercism' \
  pick='/dev/null'
zinit light exercism/cli

# shellcheck
zinit ice wait='2' lucid id-as='koalaman/shellcheck-stable' \
  atclone='tar xJf shellcheck-stable --strip-components=1 shellcheck-stable/shellcheck; rm -f shellcheck-stable' \
  atpull='%atclone' \
  sbin='shellcheck' \
  pick='/dev/null'
zinit snippet https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz

# ffmpeg
zinit ice wait='2' lucid id-as='FFmpeg/FFmpeg-static' \
  atclone='tar --strip-components=1 -xJf FFmpeg-static; rm -f FFmpeg-static' \
  atpull='%atclone' \
  sbin='ffmpeg' sbin='ffprobe' sbin='qt-faststart' \
  pick='/dev/null'
zinit snippet https://johnvansickle.com/ffmpeg/builds/ffmpeg-git-amd64-static.tar.xz

# container-diff
zinit ice wait='2' lucid id-as='GoogleContainerTools/container-diff' \
  sbin='container-diff' \
  pick='/dev/null'
zinit snippet https://storage.googleapis.com/container-diff/latest/container-diff-linux-amd64

# cloud_sql_proxy
zinit ice wait='2' lucid id-as='GoogleCloudPlatform/cloud_sql_proxy' \
  sbin='cloud_sql_proxy' \
  pick='/dev/null'
zinit snippet https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64

# smv
zinit ice wait='2' lucid id-as='smartversion/smartvs' \
  atclone='unzip -o smartvs; rm -f smartvs' \
  atpull='%atclone' \
  sbin='smv' \
  pick='/dev/null'
zinit snippet http://www.smartversion.com/smartvs382_linux_x64.zip

### syntax highlighting and suggestions ###
zinit wait='!1b' light-mode lucid for \
  atinit='zicompinit; zicdreplay' hlissner/zsh-autopair

zinit as='null' wait='2' light-mode lucid from='gh-r' for \
  sbin derailed/k9s \
  sbin terraform-linters/tflint \
  sbin digitalocean/doctl \
  sbin PostgREST/postgrest \
  sbin variadico/noti \
  sbin mgartner/pg_flame \
  sbin juliosueiras/terraform-lsp \
  sbin pinterest/ktlint \
  sbin instrumenta/kubeval \
  sbin kubernetes-sigs/kustomize \
  sbin cert-manager/cert-manager \
  mv='argocd* -> argocd' sbin argoproj/argo-cd \
  mv='argocd-image-updater* -> argocd-image-updater' sbin argoproj-labs/argocd-image-updater \
  mv='kubeseal* -> kubeseal' sbin bitnami-labs/sealed-secrets \
  mv='opa* -> opa' sbin open-policy-agent/opa \
  mv='guetzli* -> guetzli' sbin google/guetzli \
  mv='yq* -> yq' sbin mikefarah/yq \
  mv='exa* -> exa' sbin='bin/exa' ogham/exa \
  mv='q* -> q' sbin harelba/q \
  mv='hadolint* -> hadolint' sbin hadolint/hadolint \
  mv='shfmt* -> shfmt' sbin @mvdan/sh \
  mv='grv* -> grv' sbin @rgburke/grv \
  mv='mkcert* -> mkcert' sbin FiloSottile/mkcert \
  mv='skaffold* -> skaffold' sbin GoogleContainerTools/skaffold \
  mv='minikube* -> minikube' sbin kubernetes/minikube \
  mv='helmfile* -> helmfile' sbin roboll/helmfile \
  mv='stern* -> stern' sbin wercker/stern \
  mv='fluxctl* -> fluxctl' sbin='fluxctl' fluxcd/flux \
  mv='mlr* -> mlr' sbin='mlr' johnkerl/miller \
  mv='hlint* -> hlint' sbin='hlint/hlint' ndmitchell/hlint \
  mv='trdsql* -> trdsql' sbin='trdsql/trdsql' noborus/trdsql \
  mv='gdu* -> gdu' sbin dundee/gdu \
  mv='dua* -> dua' sbin='dua/dua' Byron/dua-cli \
  bpick='istioctl-*' sbin='istioctl' istio/istio \
  mv='jq* -> jq' bpick='*linux64' sbin stedolan/jq \
  mv='sops* -> sops' bpick='*linux' sbin mozilla/sops \
  bpick='*-lnx.zip' sbin dalance/procs \
  bpick='rav1e-linux.tar.gz' sbin xiph/rav1e \
  bpick='*linux_amd64.tar.gz' sbin wagoodman/dive \
  bpick='*ext*Linux-64bit.tar.gz' sbin gohugoio/hugo \
  bpick='*.tar.gz' sbin open-policy-agent/conftest \
  bpick='tfsec-linux-amd64' mv='tfsec* -> tfsec' sbin aquasecurity/tfsec \
  mv='terragrunt* -> terragrunt' sbin gruntwork-io/terragrunt \
  mv='terraform-docs* -> terraform-docs' sbin terraform-docs/terraform-docs \
  mv='ripgrep* -> rga' sbin='rga/rga' sbin='rga/rga-preproc' phiresky/ripgrep-all \
  mv='stylish-haskell* -> stylish-haskell' sbin='stylish-haskell/stylish-haskell' @haskell/stylish-haskell \
  bpick='*.tar.gz' mv='golangci-lint* -> golangci-lint' sbin='golangci-lint/golangci-lint' atload='source <(golangci-lint completion zsh)' golangci/golangci-lint

# fz and calc
zinit wait='2' light-mode lucid for \
  gradle/gradle-completion \
  arzzen/calc.plugin.zsh

# github cli
zinit ice wait='2' lucid from'gh-r' \
  bpick='*amd64.tar.gz' \
  mv='gh* -> gh' \
  sbin='gh/bin/gh' \
  pick='/dev/null' \
  atclone='/bin/rm -f _gh; gh completion -s zsh > _gh; chmod +x _gh' \
  atpull='%atclone'
zinit light cli/cli

# manydots-magic
zinit ice wait='!2' lucid atinit='zicompinit; zicdreplay' pick='manydots-magic'
zinit light knu/zsh-manydots-magic

### THEME ###
POWERLEVEL9K_MODE="nerdfont-complete"
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon load battery status disk_usage dir vcs aws kubecontext asdf virtualenv direnv vi_mode command_execution_time)
POWERLEVEL9K_TIME_FOREGROUND="011"
POWERLEVEL9K_TIME_BACKGROUND="$DEFAULT_COLOR"
POWERLEVEL9K_TIME_FORMAT="%D{%H:%M:%S}"
POWERLEVEL9K_RAM_ELEMENTS="ram_free"
POWERLEVEL9K_STATUS_VERBOSE=false
POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX="╭─"
POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX="╰─%B➤%b "
POWERLEVEL9K_DISABLE_RPROMPT=true
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()
POWERLEVEL9K_SHORTEN_DIR_LENGTH=2
POWERLEVEL9K_SHORTEN_STRATEGY="truncate_to_first_and_last"
POWERLEVEL9K_NODE_VERSION_BACKGROUND="022"
POWERLEVEL9K_VIRTUALENV_BACKGROUND="blue"
POWERLEVEL9K_KUBECONTEXT_BACKGROUND="027"
POWERLEVEL9K_AWS_BACKGROUND="yellow"
POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND="011"
POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND="$DEFAULT_COLOR"
POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD="5"

# Show prompt segment "kubecontext" only when the command you are typing
# invokes kubectl, helm, kubens, kubectx or oc.
typeset -g POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND='kubectl|helm|kubens|kubectx|oc'

# TODO: switch to powerlevel10k 100%
# zinit ice atload'!source ~/.p10k.zsh; _p9k_precmd' lucid nocd
zinit ice lucid nocd
zinit light romkatv/powerlevel10k

# Username completion.
# Delete old definitions
zstyle -d users
# For SSH and related stuff, use remote users set in SSH configuration, plus root
zstyle ':completion:*:*:(ssh|scp|rsync|mosh|slogin):*' users root $(awk '$1 == "User" { print $2 }' ~/.ssh/config ~/.ssh/conf.d/* | sort -u)
# For everything else, use non-system users from /etc/passwd, plus root
zstyle ':completion:*:*:*:*' users root $(awk -F: '$3 >= 1000 && $3 < 65000 { print $1 }' /etc/passwd)

# ssh hostname completion
# https://serverfault.com/a/170481
h=()
if [[ -r ~/.ssh/config ]]; then
  h=($h ${${${(@M)${(f)"$(cat ~/.ssh/config ~/.ssh/conf.d/* 2>/dev/null)"}:#Host *}#Host }:#*[*?]*})
fi
# HashKnownHosts must be disabled
# if [[ -r ~/.ssh/known_hosts ]]; then
#   h=($h ${${${(f)"$(cat ~/.ssh/known_hosts{,2} || true)"}%%\ *}%%,*}) 2>/dev/null
# fi
if [[ $#h -gt 0 ]]; then
  zstyle ':completion:*:(ssh|scp|rsync|lftp|ftp|mosh|slogin):*' hosts $h
fi

# Hostname completion
zstyle -e ':completion:*:hosts' hosts 'reply=(${=${(f)"$(grep -v 0.0.0.0 /etc/hosts)"}%%\#*})'

# Prettify path
if [ -n "$($SHELL -c "echo $ZSH_VERSION")" ]; then
  # remove duplicates in zsh path
  # https://til.hashrocket.com/posts/7evpdebn7g-remove-duplicates-in-zsh-path
  # shellcheck disable=SC2034
  typeset -aU path
# elif [ -n "$($SHELL -c "echo $BASH_VERSION")" ]; then
else
  PATH="$(perl -e 'print join(":", grep { not $seen{$_}++ } split(/:/, $ENV{PATH}))')"
fi

# Tilix
# https://github.com/gnunn1/tilix/wiki/VTE-Configuration-Issue
if [[ "$OSTYPE" == linux* ]]; then
  if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
    source /etc/profile.d/vte.sh
  fi
fi

# Don't store failed command to history
# http://scarff.id.au/blog/2019/zsh-history-conditional-on-command-success/
zshaddhistory() {
  whence ${${(z)1}[1]} >| /dev/null || return 1
  local line cmd
  line=${1%%$'\n'}
  cmd=${line%% *}
  [[ ${#line} -ge 5 \
    && ${cmd} != (apm|base64|bzip2|cal|calc|cat|cd|chmod|cp|curl|cvs|date|df|diff|dig|disklabel|dmesg|doas|du|e|egrep|enc|ent|exiftool|f|fdisk|feh|file|find|gimp|git|gpg|grep|hdiutil|head|hostname|ifconfig|kill|less|ls|mail|make|man|mkdir|mount|mpv|mv|nc|openssl|patch|pdf|pdfinfo|pgrep|ping|pkg_info|pkill|ps|rcctl|rm|rsync|scp|scrot|set|sha256|sort|srm|ssh|stat|strip|sudo|sysctl|tar|tmux|top|umount|uname|unzip|uptime|useradd|vlc|vi|vim|wc|wget|which|whoami|whois|wireshark|xclip|xxd|youtube-dl)
  ]]
}

# WSL2
# gpg-agent with YubiKey
# https://github.com/rupor-github/win-gpg-agent

# Clear screen
# clear

# End of ~/.zshrc
